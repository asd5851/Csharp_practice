
using System; // system에서 땡겨오고 있다. -> 속성에서 암시적

namespace first
{
    internal class Program
    {
        static void Main(string[] args)
        {
            
            float rat;
            Console.Write("반지름을 입력하세요 : ");
            string stringratio = Console.ReadLine();
            float.TryParse(stringratio, out rat);
            
            const float PI = 3.14f;
            Console.Write("부피 : ");
            Console.WriteLine(PI*4*rat*rat*rat/3);
            
            Console.Write("겉넓이 : ");
            Console.WriteLine(PI*4*rat*rat);   
            
            //Console.Write("숫자를 입력하시오: ");
            //string stringNumber = Console.ReadLine();
            //int intNumber = Convert.ToInt32(stringNumber);
            //Console.WriteLine("입력한 숫자 + 10은 {0}입니다.", intNumber + 10);

            //string stringNumber = Console.ReadLine();
            //int intNumber2 = int.Parse(stringNumber);
            //Console.WriteLine("입력한 숫자 + 10은 {0}입니다.", intNumber + 10);

            //string stringNumber = Console.ReadLine();
            //int intNumber3 = default;
            //int.TryParse(stringNumber, out intNumber3);// 가장좋은방법
            //Console.WriteLine("입력한 숫자 + 10은 {0}입니다.", intNumber + 10); 

            //Align align = Align.TOP;
            //align= Align.LEFT;
            //Console.WriteLine("enum값은 어케 보이나 -> {0}", align);
        } // Main()
        // enum Align { TOP, BOTTOM, LEFT, RIGHT, RANDOM, VALUE };
    } // class program
} // namespace first

/*
 * 컴퓨터는 software(hardware에 설치된 운영체제, 앱을 의미)와 hardware(PC, Smart phone 등 물리적 장치)로 구성되어 있고
 * 프로그램이란 우리가 하고자하는 작업을 컴퓨터에게 전달하여 주는 역할을 하는 software를 의미.
 * 프로그램 안에는 "무엇을 어떤 식으로 해라" 와 같은 형태의 Instruction(명령어)들이 들어있다.
 * software를 만드는 행위를 programing 혹은 coding 이라고 한다.
 * 컴퓨터가 알아듣는 언어는 1가지 뿐 -> 0,1 형태로 구성되어 있으며 기계어(Machine language)라고 불린다. -> 과거에는 기계어를 사용하여 프로그래밍했음.
 * 기계어 -> 프로그래밍언어 (불편하기 떄문) 프로그래밍 언어의 예약어와 문법으로 소프트웨어를 만드는 사람을 programmer 혹은 developer라고 한다.
 * 프로그래밍 언어의 문법에 맞게 작성한 텍스트로 된 명령 집합을 code 혹은 source라고 한다.
 * 소스코드를 기계어로 번역하는 작업을 compile 이라고 하고 이러한 작업을 하는 소프트웨어를 compiler 라고 한다.
 * 
 * 프로그래밍하는 과정
 * 1. 텍스트 에디터로 소스를 작성하여 파일로 저장한다.   ex) .cs 파일
 * 2. 소스 파일을 컴파일 하여 실행 프로그램을 생성      ex) exe 파일
 * 3. 프로그램을 실행한다.
 * 
 * 이 중 1,2 과정을 합쳐서 build라고 한다.
 * 프로그래밍 과정 중 발생한 오류를 bug라고 한다.
 * 오류를 탐색하고 수정하는 과정을 debug 또는 debugging 또는 trouble shooting 이라고 한다.
 * C#
 * C# 언어로 코딩 -> IL(Intermediate Language) 코드로 변환 -> 기계어
 * 
 *C#의 특징
 *C#은 .Net을 위한 많은 언어 중 하나로, 마이크로소프트의 닷넷 플랫폼을 기반으로 한다.
 *절차적 언어와 객체지향적 언어의 특징, 그리고 함수형 프로그래밍 스타일을 제공하는 다중 패러다임 프로그래밍 언어이다.
 *C#은 C, C++, Java, Javascript와 기초 문법이 비슷하다.
 *C#은 Garbage collection 기능을 제공하므로 자동으로 메모리를 관리한다.
 *C#은 컴파일 기반 언어이다.
 *C#은 강력한 형식(Strongly typed)의 언어이다. -> 문법의 형식을 강력하게 지켜야한다
 *C#은 Generic과 Linq 등 편리한 기능을 제공한다
 *C#은 대, 소문자를 구분한다.
 *memory safety하다.
 *
 *C#의 기본 코드 구조
 *C# 프로그램은 class와 Main() 매서드가 반드시 있어야 하고 하나이상의 문이 있어야 한다.
 *c#의 기본 코드는 위쪽에 네임스페이스 선언부와 Main() 매서드가 오고 중괄호 시작과 끝을 사용하여 프로그램 범위를 구분한다.
 *네임스페이스 : 자주 사용하는 네임스페이스를 위쪽에 따라 선언해 둘 수 있다.
 *Main() 매서드 : 프로그램의 시작 지점이며, 반드시 있어야 한다.
 *Method : 클래스에서 제공하는 멤버 함수
 *Main 앞에 static 키워드가 있어 개체를 생성하지 않고 바로 실행할 수 있다.
 *Main() 매서드가 2개이면 "프로그램 진입점이 2개이상 정의되어 있습니다"라는 에러메시지와 함께 컴파일 불가
 *
 *문법, 스타일, 패턴
 *문법 : 프로그래밍을 하기위해 반드시 지켜야하는 규칙 -> 언어별로 다름
 *스타일 : 프로그래밍 가이드라인이다.
 *패턴 : 자주 사용하는 규칙과 스타일 모음
 *
 *정규화된 이름
 *정규화된 이름(Fully qualified names)은 아래와 같이 네임스페이스 이름과 형식 이름까지 전체를 지정하는 방식
 *System.Console.WriteLine("Hello,world!");
 *
 *출력문 : 명령 프롬프트에 출력하는 구문
 *주석문 : 실행에 영향을 주지 않는 코드 설명문
 *들여쓰기 : 프로그램 소스 코드의 가독성을 위해서 사용하는 일반적인 들여쓰기 규칙 4칸의 스페이스 or tab사용(혼용금지)
 *공백처리 : C#에서 명령어 사이, 기호와 괄호 사이의 공백, tab, 줄바꿈은 무시된다.
 *중괄호({}) : 프로그램 범위를 구분 짓는다.
 *세미콜론(;) : 명령어 (문, 문장)의 끝을 나타낸다.
 *
 *이스케이프 시퀀스
 *C#은 WriteLine() 매서드에서 사용할 확장 문자를 제공하는데, 이를 역슬래시 기호와 특정 문자를 조합하면
 *특별한 기능을 사용 가능 EX) \n
 *
 *문자열 보간법(String Interpolation) 또는 문자열 템플릿(String template)이라고도 한다.
 *문자열을 묶어서 처리하기 위한 기능이다. 기존에는 String.Format() 매서드를 주로 사용했었는데
 *C# 6.0 이전부터 $"{}" 형태로 간결하게 제공하고 있다.
 *
 *변수
 *프로그램에서 값을 다루려면 데이터를 메모리에 잠시 보관해 놓고 사용할 수 있는 임시 저장공간이 필요하다
 *이때 변수를 사용한다. 변수를 사용하는 순서는 선언(메모리에 공간을 확보)하고 정의(대입, 할당)하여
 *사용하는 것이다. 변수는 데이터 형식, 변수의 이름, 대입한 값으로 이루어져 있다.
 *메모리는 항상 차있는데 거기있는 것을 할당하고 정의하는 방식
 *변수 선언 : 메모리에 데이터를 저장할 공간을 확보하는 것이다.
 *변수 정의 : 확보한 공간에 값을 저장하는 것이다.
 *변수 초기화 : 변수를 선언한 직후, 초기값으로 정의하는 것이다. 초기화는 변수의 초기값을 명확하게 정의하여
 *            원치않는 논리적인 오류를 방지하는 역할을 한다.
 *            
 *상수
 *변수를 선언할 때 앞에 const 키워드를 붙이면 상수(Constant)가 된다. 한 번 상수로 선언된 변수는
 *다시 값을 바꿀 수 없고, 반드시 선언과 동시에 초기화해야 한다. 이러한 const 키워드를 붙인 변수를
 *상수 또는 지역상수라고 한다.상수는 주로 대문자로 표현한다.
 *
 *리터럴
 *변수에 저장하기위해 직접 대입하는 값 자체를 리터럴(Literal)이라고 한다.
 *정수형 리터럴 : 숫자 그대로 표현한다.                        ex) 1234
 *실수형 리터럴 : 대문자 F 혹은 소문자 f를 접미사로 붙여 표현한다. ex) 3.14F
 *문자형 리터럴 : 작은 따옴표로 묶어서 표현한다.                 ex) 'A'
 *문자열 리터럴 : 큰 따옴표로 묶어서 표현한다.                   ex) "Hello"
 *
 *숫자 구분자
 *C# 7.0 버전부터는 언더스코어(_) 문자를 사용하는 숫자 구분자 (Digit separator)를 제공한다.
 *숫자 형식을 표현할 때 언더스코어 문자는 무시한다. 이를 이용하면 긴 숫자를 표시할 때 가독성을 높일 수 있다.
 *
 *null 키워드
 *C#에서 null 키워드는 아무겂도 없는 값을 의미한다.
 *null 가능 형식 (nullable 형식)
 *숫자 형식의 변수를 선언 할때 int?, float?와 같이 물음표(?) 기호를 붙이면 null 가능 형식으로 변경된다.
 *이러한 null 가능 형식에는 아무런 값도 없음을 의미하는 null을 대입할 수 있다.
 *
 *자동 타입 추론(Automatic type deduction)
 *변수에 대입하는 값의 데이터 타입이 명시적이거나 명확할 때, 데이터 타입을 명시하지 않고 생략할 수 있다.
 *자동 타입 추론이란 컴파일러가 대입하는 값 또는 변수의 데이터 타입으로 다른 한 쪽의 데이터 타입을 추론하는 기능을 의미한다.
 *
 *default 값
 *C# 6.0 버전부터는 자동타입 추론으로 기본 형식에 default 값을 대입할 수 있다.
 *기본 형식마다 정해진 default 값이 존재한다.
 *
 *열거형 형식
 *c#에서 열거형 형식은 기억하기 어려운 상수들을 기억하기 쉬운 이름 하나로 묶어 관리하는 표현 방식이다.
 *일반적으로 열거형으로 줄여 말한다. 열거형은 enum 키워드를 사용하고 이늄또는 이넘으로 읽는다.
 *열거형은 클래스 범위 내에 정의해야하며 메서드 범위 안에는 정의할 수 없다.
 *
 *입출력에 대해서
 *프로그램을 실행할 때마다 서로 다른 값을 입력받으려면 콘솔에서 입력한 값을 변수에 저장할 수 있어야 한다.
 *키보드로 입력받고 모니터로 출력하는 일반적인 내용을 표준 입출력(Standard input/output)이라고 한다.
 *
 *형식변환
 *console.readline() 매서드를 사용하여 콘솔에서 입력받은 데이터는 문자열이다.
 *문자열 대신 정수나 실수 데이터를 입력받고 싶다면 문자열을 원하는 데이터 형식으로 변환할 수 있어야 한다.
 *키워드 : 캐스팅 연산자, 암시적(묵시적) 형변환, 명시적 형변환
 *
 *.Net은
 *닷넷은 닷넷 프레임워크와 닷넷 코어를 합쳐서 편하게 닷넷 이라고 한다.
 *닷넷은 소프트웨어 프레임워크로 응용 프로그램의 개발 속도를 높이는데 도움이 되는 api 및 서비스 모음
 *
 *함수 : 프로그램에서 사용하기 위한 기능의 단위를 의미, 보통 하나의 함수는 하나의 기능을 한다.
 *라이브러리 : 어떠한 기능을 구현할 때 도움이 되는 기술, 함수의 모음 -> 코드의 집합 (도구자체) (개발자가 라이브러리 호출)
 *API : 어떠한 기능을 구현할 때 도움이 되도록 문서와 함께 제공되는 라이브러리, 함수의 모음 (도구 주세요라고 요청)
 *플랫폼 : 프로그램을 실행하기 위한 배경 환경 또는 운영체제를 의미한다.
 *프레임워크 : 응용 프로그램의 개발 속도를 높이는데 도움이되는 API 및 서비스 모음 (프레임 워크가 개발자를 호출)
 *alt누르고 키보드-> 내려감
 *
 *1byte = 8bit
 *1kb = 1000b
 *1mb = 1000kb
 *1gb = 1000mb
 *int 4byte인 이유 : 64bit 운영체제 x64기반 프로세서 -> 32bit 운영체제에서는 2byte 였다.
 *변수 사용할 때 주의사항
 *변수의 이름을 지을 때는 다음 규칙을 지켜야 한다.
 *변수의 첫 글자는 반드시 문자로 지정 -> 숫자는 변수의 이름 첫글자 불가
 *길이는 255자 이하로 하고 공백을 포함할 수 없다. -> 변수가 1byte로 지정되어있네 255 = 1111 1111
 *영문자와 숫자, 언더스코어(_) 조합으로 사용하며, 기타 특수 기호는 사용할 수 없다.
 *C#에서 사용하는 키워드는 사용할 수 없다.
 *변수는 대, 소문자를 구분 일반적으로 소문자 사용
 *변수는 타인이 보더라도 이해할 수 있는 이름으로 사용한다.
 *
 *데이터형식
 *변수에 저장할 수 있는 데이터의 종류를 자료형(Data type) 이라고 한다.
 *int, string, bool, double, object 등 c#에서 기본으로 제공하는 데이터 형식을 기본형식(Primitive type)이라고 한다.
 *
 *int: 정수형 데이터 타입
 *flaot : 실수형 데이터 타입 -> C#은 기본적으로 double 사용
 *bool : 논리값
 *char : 한문자
 *string : 문자열
 *object : C#에서 모든 자료형의 부모형 데이터 타입(모든 데이터 저장 가능)
 *
 *과제------------------
 *memory safety하다란?
 *콜드스토리지 : 하드디스크날라감
 */